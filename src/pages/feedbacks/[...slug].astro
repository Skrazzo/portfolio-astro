---
import { getCollection, render } from "astro:content";
import InfoPage from "~layouts/InfoPage.astro";
import GlassContainer from "~components/GlassContainer.astro";
import { SEO } from "astro-seo";
import type { CollectionEntry } from "astro:content";
import { hasFileExtension } from "~utils/hasFileExtension";
import Stars from "~components/Stars.astro";

// Generate static paths for all projects
export async function getStaticPaths() {
    const projects = await getCollection("feedbacks");
    return projects
        .map((project) => ({
            params: { slug: project.id },
            props: { project },
        }))
        .filter((data) => !hasFileExtension(data.props.project.data.fullFeedbackLink || ""));
}

interface Props {
    project: CollectionEntry<"feedbacks">;
}

const { project }: Props = Astro.props;
const { Content } = await render(project);

// Extract project data
const { fromName, stars, snippet } = project.data;

// Set meta description to be the snippet
let metaDescription = snippet;
---

<InfoPage>
    <SEO
        slot="head"
        title={`Feedback from ${fromName}`}
        description={metaDescription}
        extend={{
            meta: [
                { name: "author", content: fromName },
                {
                    name: "keywords",
                    content: `web development, ${fromName}, feedback, portfolio project, Leons, programming`,
                },
            ],
        }}
    />

    <GlassContainer className="mb-[80px]" transition:animate="slide">
        <div slot="title" class="w-full flex max-sm:flex-col gap-2 items-center justify-between mb-4">
            <h4 class="text-gradient title-gradient-left" transition:name={fromName}>
                {fromName}
            </h4>
            <Stars stars={stars} starTransition={`star-${fromName}`} />
        </div>
        <main class="text-container">
            <Content />
        </main>
    </GlassContainer>
</InfoPage>

<style>
    .text-container {
        /* titles */
        h2 {
            background: -webkit-linear-gradient(180deg, var(--text-dimmed), var(--text));
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;

            width: fit-content;
            font-size: clamp(var(--text-mobile-lg), 3vw, var(--text-lg));
            font-weight: 700;

            margin: 1rem 0;
        }

        /* paragraphs */
        p {
            margin: 0.5rem 0;
            font-size: clamp(var(--text-mobile-sm), 3vw, var(--text-sm));
            line-height: calc(clamp(var(--text-mobile-sm), 3vw, var(--text-sm)) * 1.5);
            letter-spacing: -0.5px;

            background: -webkit-linear-gradient(180deg, var(--text-dimmed), var(--text));
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        /* classes for under paragrahs and lists */
        p,
        ul {
            margin-bottom: 2rem;
        }

        /* for last elements remove styles */
        p:last-child,
        ul:last-child {
            margin-bottom: 0;
        }

        animation: fadeIn 400ms ease-in-out forwards;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    /* @media (max-width: 768px) { */
    /*     .text-container { */
    /*         h2 { */
    /*             text-align: center; */
    /*             width: 100%; */
    /*         } */
    /*     } */
    /* } */
</style>
