---
import InfoPage from "~layouts/InfoPage.astro";
import { SEO } from "astro-seo";
import GlassContainer from "~components/GlassContainer.astro";
import { Image } from "astro:assets";
import MePicture from "~assets/me.png";
import { Icon } from "astro-icon/components";
import type { SkillsType, ImageMetadata } from "~types/data";
import { getImageDominantColor, getProminentColorFromSVG } from "~utils/getImageDominantColor";
import path from "path";
import type { HexColor } from "~types/colors";
import Feedback from "~components/AboutMe/Feedback.astro";
// Get about me text
import { Content as AboutMeContent } from "~assets/about-me.md";
import { getCollection, type CollectionEntry } from "astro:content";

// get list of skills, and process data
const skillsFiles = import.meta.glob<ImageMetadata>("../../assets/skills/*.{svg,png}", { eager: true });
const skills: SkillsType[] = [];

for (const [filePath, image] of Object.entries(skillsFiles)) {
    // Get the base project directory
    const projectRoot = process.cwd();

    // Remove everything before "assets/skills" to get consistent path
    const relativePath = filePath.split("assets/skills/").pop();
    if (!relativePath) continue;

    // Construct full path that works in both dev and build
    const fullPath = path.join(projectRoot, "src/assets/skills", relativePath);

    let fullFileName = relativePath; // Just use the filename part
    const fileName = fullFileName.split(".")[0];

    let color: HexColor;
    if (path.extname(fullFileName) === ".svg") {
        color = getProminentColorFromSVG(fullPath) as HexColor;
    } else {
        color = await getImageDominantColor(fullPath);
    }

    skills.push({
        src: image.default,
        name: fileName,
        color: color,
    });
}

// Get feedback collections
const feedbackCollection = (await getCollection("feedbacks")) as CollectionEntry<"feedbacks">[];
---

<InfoPage>
    <!-- Metadata head -->
    <SEO
        slot={"head"}
        title="About Leons - Full-Stack Developer & Tech Enthusiast"
        description="Discover the journey of Leons, a passionate full-stack developer with a love for technology and gaming. Learn about my early interest in scripting, my transition to web development, and my current expertise in full-stack development."
        openGraph={{
            basic: {
                title: "About leons - Full-Stack Developer & Tech Enthusiast",
                type: "profile",
                image: "me.png",
            },
            image: {
                alt: "Leons - Full Stack Developer",
            },
        }}
        extend={{
            meta: [
                {
                    name: "keywords",
                    content: "full-stack developer, web development, programming, technology, software engineer",
                },
                { name: "author", content: "Leons Aleksandrovs" },
            ],
        }}
    />

    <!-- About me -->
    <GlassContainer className="md:mt-[80px]">
        <h1 slot="title" class="text-gradient title-gradient-left">About me</h1>
        <main class="flex max-md:flex-col gap-12 mt-6">
            <Image
                class="border-[3px] border-[#DAD5E2] bg-panel-border rounded-xl max-md:object-top max-sm:h-[300px] max-md:h-[520px] md:w-[320px] lg:w-[384px] opacity-80 aspect-[0.8/1] object-cover"
                src={MePicture}
                loading={"eager"}
                alt={"Me sitting on railroads"}
            />
            <div class="text-light about-me-content">
                <AboutMeContent />
            </div>
        </main>
    </GlassContainer>

    <!-- Arrow down -->
    <div class="text-dimmed flex justify-center max-md:hidden mt-12">
        <Icon class="animate-bounce-slow" name={"chevronDown"} stroke-width={2} width={54} height={54} />
    </div>

    <!-- My skills -->
    <div class="min-h-screen grid place-content-center py-[80px]">
        <GlassContainer className="w-full">
            <h3 slot="title" class="text-gradient title-gradient-left">My Skills</h3>
            <div class="flex justify-center items-center flex-wrap mt-6 md:mt-8 gap-6 md:gap-12">
                {
                    skills.map((skill) => (
                        <div class="skill-item">
                            <span style={{ backgroundColor: skill.color }}>{skill.name}</span>

                            <Image
                                class={"w-[56px] h-[56px] md:w-[96px] md:h-[96px]"}
                                loading={"lazy"}
                                src={skill.src}
                                alt={`${skill.name} logo`}
                            />
                        </div>
                    ))
                }
            </div>
        </GlassContainer>
    </div>

    <!-- Feedbacks -->
    <div class="min-h-screen grid place-content-center py-[80px]">
        <GlassContainer>
            <h4 slot="title" class="text-gradient title-gradient-left mb-4">Feedbacks</h4>
            {feedbackCollection.map((feedback) => <Feedback entry={feedback} />)}
        </GlassContainer>
    </div>
</InfoPage>

<style>
    .about-me-content {
        flex: 1;

        display: flex;
        flex-direction: column;
        gap: calc(var(--text-md) * 1.3);

        font-size: clamp(var(--text-mobile-md), 3vw, var(--text-md));
        letter-spacing: -1px;
        line-height: calc(clamp(var(--text-mobile-md), 3vw, var(--text-md)) * 1.3);

        h2 {
            font-size: clamp(var(--text-mobile-lg), 6vw, var(--text-lg));
            font-weight: 600;
        }
    }

    .skill-item {
        display: grid;
        place-items: center;
        position: relative;
        transition: all 250ms ease;

        span {
            color: var(--text);
            font-size: clamp(var(--text-mobile-sm), 3vw, var(--text-sm));
            font-weight: 700;
            white-space: nowrap;

            padding: 4px 8px;
            border-radius: 8px;

            position: absolute;
            top: 0;
            opacity: 0;
            scale: 0.8;

            background-color: rgb(34, 97, 139);
            transition: all 250ms ease;
        }

        &:hover {
            transform: translateY(-5%);
            scale: 1.05;

            span {
                transform: translateY(-125%);
                opacity: 1;
                scale: 1;
            }
        }
    }
</style>
