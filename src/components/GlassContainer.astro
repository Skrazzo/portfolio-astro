---
interface Props {
    className?: string;
    as?: string;
}

const { className = "", as = "div" } = Astro.props;

// Dynamically set the element type based on the 'as' prop
const Element = as;
---

<Element
    class={"glass-container md:w-full md:max-w-[1200px] mx-auto md:p-12 md:pt-6 rounded-2xl backdrop-blur md:bg-panel-background md:border-2 md:border-panel-border " +
        className}
>
    <div class="title font-bold flex justify-center">
        <slot name="title" />
    </div>

    <slot />
</Element>

<style>
    .title {
        font-size: clamp(var(--text-mobile-title), 6vw, var(--text-title));
    }

    @keyframes fade-in {
        from {
            opacity: 0;
            scale: 0.8;
        }
        to {
            opacity: 1;
            scale: 1;
        }
    }

    @media (max-width: 768px) {
        .glass-container {
            padding: 0 var(--padding-x);
        }
    }
</style>
