---
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";
import { render } from "astro:content";

interface Props {
    entry: CollectionEntry<"feedbacks">;
}

const { entry }: Props = Astro.props;
const data = entry.data;

const { Content } = await render(entry);

let containerID = Math.random().toString(36).substring(7);
---

<div
    id={containerID}
    class="flex gap-[6px] md:gap-3 duration-300 ease-out px-2 py-3 md:px-4 md:py-6 rounded-xl -mx-4 cursor-pointer"
>
    <Icon
        class="toggleFeedback text-dimmed -rotate-90 w-[30px] h-[30px] md:w-[54px] md:h-[54px] duration-300 ease-out"
        name={"chevronDown"}
    />
    <div class="toggleFeedback w-full relative -top-2">
        <div class="flex justify-between">
            <!-- Person name -->
            <h4 class="text-light tracking-tight">{data.fromName}</h4>
            <!-- Feedback stars -->
            <div class="flex gap-1 md:gap-3">
                {
                    () => {
                        const stars = new Array(data.stars).fill(null);
                        const emptyStars = new Array(5 - data.stars).fill(null);
                        const starClass = "w-[20px] h-[20px] md:w-[32px] md:h-[32px]";
                        return (
                            <>
                                {stars.map(() => (
                                    <Icon name={"star"} class={`${starClass} text-accent opacity-80`} />
                                ))}
                                {emptyStars.map(() => (
                                    <Icon name={"star"} class={`${starClass} text-dimmed opacity-15`} />
                                ))}
                            </>
                        );
                    }
                }
            </div>
        </div>
        <!-- Feedback -->
        <div
            class="message-container overflow-hidden transition-all duration-500 ease-out max-h-6 md:max-h-8 line-clamp-1 text-dimmed"
        >
            <Content />

            {
                data.fullFeedbackLink && (
                    <a
                        target="_blank"
                        href={data.fullFeedbackLink}
                        class="button flex items-center gap-1 md:gap-3 mt-3 md:mt-6 max-md:ml-auto bg-panel-background border md:border-2 border-panel-border max-w-fit p-2 md:p-3 rounded-md"
                    >
                        <Icon class="w-[22px] h-[22px] md:w-8 md:h-8 text-dimmed" name={"textFile"} />
                        <span class="text-light tracking-tighter">Full version</span>
                    </a>
                )
            }
        </div>
    </div>
</div>

<style>
    button span {
        font-size: clamp(var(--text-mobile-sm), 2vw, var(--text-sm));
    }

    h4 {
        font-size: clamp(var(--text-mobile-sm), 3vw, var(--text-sm));
    }

    .message-container {
        font-size: clamp(var(--text-mobile-sm), 2vw, var(--text-sm));

        transition: all 250ms ease;
    }
</style>

<script define:vars={{ id: containerID }}>
    const toggleClassArray = (element, classes) => {
        if (!element) return;
        if (!classes) return;

        let toggleClasses;
        if (!Array.isArray(classes)) {
            // Convert from string to array
            toggleClasses = classes
                .toString()
                .split(" ")
                .map((className) => className.trim())
                .filter((className) => className !== "");
        } else {
            // Clean array
            toggleClasses = classes
                .map((className) => className.toString().trim())
                .filter((className) => className !== "");
        }

        toggleClasses.forEach((className) => {
            element.classList.toggle(className);
        });
    };

    const main = document.getElementById(id);
    if (!main) return;

    const toggles = main.querySelectorAll(".toggleFeedback");
    toggles.forEach((toggle) => {
        toggle.addEventListener("click", () => {
            // Toggle chevron rotation, and color change
            const chevron = main.querySelector("svg.toggleFeedback");

            if (chevron) {
                toggleClassArray(chevron, ["-rotate-90", "text-light", "text-dimmed"]);
            }

            // Toggle background color
            if (main) {
                toggleClassArray(main, ["bg-background-opacity-15", "mt-4"]);
            }

            // Toggle open
            const msgContainer = main.querySelector(".message-container");
            if (msgContainer) {
                // toggle classses for message container
                toggleClassArray(msgContainer, "max-h-6 md:max-h-8 max-h-[450px] text-light pt-2");

                const lineClamp = "line-clamp-1";
                // Animate line-clamp correctly
                if (msgContainer.classList.contains(lineClamp)) {
                    // If description is one line already
                    msgContainer.classList.remove(lineClamp);
                } else {
                    setTimeout(() => {
                        msgContainer.classList.add(lineClamp);
                    }, 400);
                }
            }
        });
    });
</script>
