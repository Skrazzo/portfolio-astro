---
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";
import { getEntry, render } from "astro:content";

interface Props {
    entry: CollectionEntry<"feedbacks">;
}

const { entry }: Props = Astro.props;
const data = entry.data;

const { Content } = await render(entry);

let containerID = Math.random().toString(36).substring(7);
---

<div id={containerID} class="flex gap-3 duration-300 ease-out px-4 py-6 rounded-xl -mx-4 cursor-pointer">
    <Icon class="toggleFeedback text-dimmed -rotate-90 w-[54px] h-[54px] duration-300 ease-out" name={"chevronDown"} />
    <div class="toggleFeedback w-full relative -top-2">
        <div class="flex justify-between">
            <!-- Person name -->
            <h4 class="text-light tracking-tight">{data.fromName}</h4>
            <!-- Feedback stars -->
            <div class="flex gap-3">
                {
                    () => {
                        const stars = new Array(data.stars).fill(null);
                        const emptyStars = new Array(5 - data.stars).fill(null);
                        const starClass = "w-[32px] h-[32px]";
                        return (
                            <>
                                {stars.map(() => (
                                    <Icon name={"star"} class={`${starClass} text-accent opacity-80`} />
                                ))}
                                {emptyStars.map(() => (
                                    <Icon name={"star"} class={`${starClass} text-dimmed opacity-15`} />
                                ))}
                            </>
                        );
                    }
                }
            </div>
        </div>
        <!-- Feedback -->
        <div class="message-container overflow-hidden transition-all duration-500 ease-out max-h-8 line-clamp-1">
            <Content />

            {
                data.fullFeedbackLink && (
                    <div>
                        <a
                            target="_blank"
                            href={data.fullFeedbackLink}
                            class="flex items-center gap-3 mt-6 bg-panel-background border-2 border-panel-border max-w-fit p-3 rounded-md"
                        >
                            <Icon class="w-8 h-8 text-dimmed" name={"textFile"} />
                            <span class="text-light tracking-tighter">Full version</span>
                        </a>
                    </div>
                )
            }
        </div>
    </div>
</div>

<style>
    h4 {
        font-size: var(--text-sm);
    }

    .message-container {
        color: var(--text-dimmed);
        font-size: var(--text-sm);

        transition: all 250ms ease;
    }

    .message-container-open {
        color: var(--text);
    }
</style>

<script define:vars={{ id: containerID }}>
    const main = document.getElementById(id);
    if (!main) return;

    const toggles = main.querySelectorAll(".toggleFeedback");
    toggles.forEach((toggle) => {
        toggle.addEventListener("click", () => {
            // Toggle chevron rotation, and color change
            const chevron = main.querySelector("svg.toggleFeedback");

            if (chevron) {
                chevron.classList.toggle("-rotate-90");
                chevron.classList.toggle("text-light");
                chevron.classList.toggle("text-dimmed");
            }

            // Toggle background color

            if (main) {
                main.classList.toggle("bg-background-opacity-15");
            }

            // Toggle open
            const container = main.querySelector(".message-container");
            if (container) {
                container.classList.toggle("max-h-8");
                container.classList.toggle("max-h-96");

                container.classList.toggle("message-container-open");

                const lineClamp = "line-clamp-1";
                // Animate line-clamp correctly
                if (container.classList.contains(lineClamp)) {
                    // If description is one line already
                    container.classList.remove(lineClamp);
                } else {
                    setTimeout(() => {
                        container.classList.add(lineClamp);
                    }, 400);
                }
            }
        });
    });
</script>
